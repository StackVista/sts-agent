#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport

class TJvmGcType(object):
    UNKNOWN = 0
    SERIAL = 1
    PARALLEL = 2
    CMS = 3
    G1 = 4

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "SERIAL",
        2: "PARALLEL",
        3: "CMS",
        4: "G1",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "SERIAL": 1,
        "PARALLEL": 2,
        "CMS": 3,
        "G1": 4,
    }


class TServiceInfo(object):
    """
    Attributes:
     - serviceName
     - serviceLibs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'serviceLibs', (TType.STRING, 'UTF8', False), None, ),  # 2
    )

    def __init__(self, serviceName=None, serviceLibs=None,):
        self.serviceName = serviceName
        self.serviceLibs = serviceLibs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.serviceLibs = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.serviceLibs.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TServiceInfo')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.serviceLibs is not None:
            oprot.writeFieldBegin('serviceLibs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.serviceLibs))
            for iter6 in self.serviceLibs:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TServerMetaData(object):
    """
    Attributes:
     - serverInfo
     - vmArgs
     - serviceInfos
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'serverInfo', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'vmArgs', (TType.STRING, 'UTF8', False), None, ),  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        (10, TType.LIST, 'serviceInfos', (TType.STRUCT, (TServiceInfo, TServiceInfo.thrift_spec), False), None, ),  # 10
    )

    def __init__(self, serverInfo=None, vmArgs=None, serviceInfos=None,):
        self.serverInfo = serverInfo
        self.vmArgs = vmArgs
        self.serviceInfos = serviceInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serverInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vmArgs = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.vmArgs.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.serviceInfos = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = TServiceInfo()
                        _elem18.read(iprot)
                        self.serviceInfos.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TServerMetaData')
        if self.serverInfo is not None:
            oprot.writeFieldBegin('serverInfo', TType.STRING, 1)
            oprot.writeString(self.serverInfo.encode('utf-8') if sys.version_info[0] == 2 else self.serverInfo)
            oprot.writeFieldEnd()
        if self.vmArgs is not None:
            oprot.writeFieldBegin('vmArgs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.vmArgs))
            for iter19 in self.vmArgs:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.serviceInfos is not None:
            oprot.writeFieldBegin('serviceInfos', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.serviceInfos))
            for iter20 in self.serviceInfos:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TJvmInfo(object):
    """
    Attributes:
     - version
     - vmVersion
     - gcType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I16, 'version', None, 0, ),  # 1
        (2, TType.STRING, 'vmVersion', 'UTF8', None, ),  # 2
        (3, TType.I32, 'gcType', None, 0, ),  # 3
    )

    def __init__(self, version=thrift_spec[1][4], vmVersion=None, gcType=thrift_spec[3][4],):
        self.version = version
        self.vmVersion = vmVersion
        self.gcType = gcType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.version = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vmVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.gcType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TJvmInfo')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I16, 1)
            oprot.writeI16(self.version)
            oprot.writeFieldEnd()
        if self.vmVersion is not None:
            oprot.writeFieldBegin('vmVersion', TType.STRING, 2)
            oprot.writeString(self.vmVersion.encode('utf-8') if sys.version_info[0] == 2 else self.vmVersion)
            oprot.writeFieldEnd()
        if self.gcType is not None:
            oprot.writeFieldBegin('gcType', TType.I32, 3)
            oprot.writeI32(self.gcType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentInfo(object):
    """
    Attributes:
     - hostname
     - ip
     - ports
     - agentId
     - applicationName
     - serviceType
     - pid
     - agentVersion
     - vmVersion
     - startTimestamp
     - endTimestamp
     - endStatus
     - serverMetaData
     - jvmInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'hostname', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'ports', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'agentId', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'applicationName', 'UTF8', None, ),  # 5
        (6, TType.I16, 'serviceType', None, None, ),  # 6
        (7, TType.I32, 'pid', None, None, ),  # 7
        (8, TType.STRING, 'agentVersion', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'vmVersion', 'UTF8', None, ),  # 9
        (10, TType.I64, 'startTimestamp', None, None, ),  # 10
        (11, TType.I64, 'endTimestamp', None, None, ),  # 11
        (12, TType.I32, 'endStatus', None, None, ),  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        (20, TType.STRUCT, 'serverMetaData', (TServerMetaData, TServerMetaData.thrift_spec), None, ),  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        (30, TType.STRUCT, 'jvmInfo', (TJvmInfo, TJvmInfo.thrift_spec), None, ),  # 30
    )

    def __init__(self, hostname=None, ip=None, ports=None, agentId=None, applicationName=None, serviceType=None, pid=None, agentVersion=None, vmVersion=None, startTimestamp=None, endTimestamp=None, endStatus=None, serverMetaData=None, jvmInfo=None,):
        self.hostname = hostname
        self.ip = ip
        self.ports = ports
        self.agentId = agentId
        self.applicationName = applicationName
        self.serviceType = serviceType
        self.pid = pid
        self.agentVersion = agentVersion
        self.vmVersion = vmVersion
        self.startTimestamp = startTimestamp
        self.endTimestamp = endTimestamp
        self.endStatus = endStatus
        self.serverMetaData = serverMetaData
        self.jvmInfo = jvmInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ports = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.applicationName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.serviceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.pid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.agentVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.vmVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.startTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.endTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.endStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.serverMetaData = TServerMetaData()
                    self.serverMetaData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.jvmInfo = TJvmInfo()
                    self.jvmInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TAgentInfo')
        if self.hostname is not None:
            oprot.writeFieldBegin('hostname', TType.STRING, 1)
            oprot.writeString(self.hostname.encode('utf-8') if sys.version_info[0] == 2 else self.hostname)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.ports is not None:
            oprot.writeFieldBegin('ports', TType.STRING, 3)
            oprot.writeString(self.ports.encode('utf-8') if sys.version_info[0] == 2 else self.ports)
            oprot.writeFieldEnd()
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 4)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.applicationName is not None:
            oprot.writeFieldBegin('applicationName', TType.STRING, 5)
            oprot.writeString(self.applicationName.encode('utf-8') if sys.version_info[0] == 2 else self.applicationName)
            oprot.writeFieldEnd()
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I16, 6)
            oprot.writeI16(self.serviceType)
            oprot.writeFieldEnd()
        if self.pid is not None:
            oprot.writeFieldBegin('pid', TType.I32, 7)
            oprot.writeI32(self.pid)
            oprot.writeFieldEnd()
        if self.agentVersion is not None:
            oprot.writeFieldBegin('agentVersion', TType.STRING, 8)
            oprot.writeString(self.agentVersion.encode('utf-8') if sys.version_info[0] == 2 else self.agentVersion)
            oprot.writeFieldEnd()
        if self.vmVersion is not None:
            oprot.writeFieldBegin('vmVersion', TType.STRING, 9)
            oprot.writeString(self.vmVersion.encode('utf-8') if sys.version_info[0] == 2 else self.vmVersion)
            oprot.writeFieldEnd()
        if self.startTimestamp is not None:
            oprot.writeFieldBegin('startTimestamp', TType.I64, 10)
            oprot.writeI64(self.startTimestamp)
            oprot.writeFieldEnd()
        if self.endTimestamp is not None:
            oprot.writeFieldBegin('endTimestamp', TType.I64, 11)
            oprot.writeI64(self.endTimestamp)
            oprot.writeFieldEnd()
        if self.endStatus is not None:
            oprot.writeFieldBegin('endStatus', TType.I32, 12)
            oprot.writeI32(self.endStatus)
            oprot.writeFieldEnd()
        if self.serverMetaData is not None:
            oprot.writeFieldBegin('serverMetaData', TType.STRUCT, 20)
            self.serverMetaData.write(oprot)
            oprot.writeFieldEnd()
        if self.jvmInfo is not None:
            oprot.writeFieldBegin('jvmInfo', TType.STRUCT, 30)
            self.jvmInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TJvmGcDetailed(object):
    """
    Attributes:
     - jvmGcNewCount
     - jvmGcNewTime
     - jvmPoolCodeCacheUsed
     - jvmPoolNewGenUsed
     - jvmPoolOldGenUsed
     - jvmPoolSurvivorSpaceUsed
     - jvmPoolPermGenUsed
     - jvmPoolMetaspaceUsed
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'jvmGcNewCount', None, None, ),  # 1
        (2, TType.I64, 'jvmGcNewTime', None, None, ),  # 2
        (3, TType.DOUBLE, 'jvmPoolCodeCacheUsed', None, None, ),  # 3
        (4, TType.DOUBLE, 'jvmPoolNewGenUsed', None, None, ),  # 4
        (5, TType.DOUBLE, 'jvmPoolOldGenUsed', None, None, ),  # 5
        (6, TType.DOUBLE, 'jvmPoolSurvivorSpaceUsed', None, None, ),  # 6
        (7, TType.DOUBLE, 'jvmPoolPermGenUsed', None, None, ),  # 7
        (8, TType.DOUBLE, 'jvmPoolMetaspaceUsed', None, None, ),  # 8
    )

    def __init__(self, jvmGcNewCount=None, jvmGcNewTime=None, jvmPoolCodeCacheUsed=None, jvmPoolNewGenUsed=None, jvmPoolOldGenUsed=None, jvmPoolSurvivorSpaceUsed=None, jvmPoolPermGenUsed=None, jvmPoolMetaspaceUsed=None,):
        self.jvmGcNewCount = jvmGcNewCount
        self.jvmGcNewTime = jvmGcNewTime
        self.jvmPoolCodeCacheUsed = jvmPoolCodeCacheUsed
        self.jvmPoolNewGenUsed = jvmPoolNewGenUsed
        self.jvmPoolOldGenUsed = jvmPoolOldGenUsed
        self.jvmPoolSurvivorSpaceUsed = jvmPoolSurvivorSpaceUsed
        self.jvmPoolPermGenUsed = jvmPoolPermGenUsed
        self.jvmPoolMetaspaceUsed = jvmPoolMetaspaceUsed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.jvmGcNewCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.jvmGcNewTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.jvmPoolCodeCacheUsed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.jvmPoolNewGenUsed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.jvmPoolOldGenUsed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.jvmPoolSurvivorSpaceUsed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.jvmPoolPermGenUsed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.jvmPoolMetaspaceUsed = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TJvmGcDetailed')
        if self.jvmGcNewCount is not None:
            oprot.writeFieldBegin('jvmGcNewCount', TType.I64, 1)
            oprot.writeI64(self.jvmGcNewCount)
            oprot.writeFieldEnd()
        if self.jvmGcNewTime is not None:
            oprot.writeFieldBegin('jvmGcNewTime', TType.I64, 2)
            oprot.writeI64(self.jvmGcNewTime)
            oprot.writeFieldEnd()
        if self.jvmPoolCodeCacheUsed is not None:
            oprot.writeFieldBegin('jvmPoolCodeCacheUsed', TType.DOUBLE, 3)
            oprot.writeDouble(self.jvmPoolCodeCacheUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolNewGenUsed is not None:
            oprot.writeFieldBegin('jvmPoolNewGenUsed', TType.DOUBLE, 4)
            oprot.writeDouble(self.jvmPoolNewGenUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolOldGenUsed is not None:
            oprot.writeFieldBegin('jvmPoolOldGenUsed', TType.DOUBLE, 5)
            oprot.writeDouble(self.jvmPoolOldGenUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolSurvivorSpaceUsed is not None:
            oprot.writeFieldBegin('jvmPoolSurvivorSpaceUsed', TType.DOUBLE, 6)
            oprot.writeDouble(self.jvmPoolSurvivorSpaceUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolPermGenUsed is not None:
            oprot.writeFieldBegin('jvmPoolPermGenUsed', TType.DOUBLE, 7)
            oprot.writeDouble(self.jvmPoolPermGenUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolMetaspaceUsed is not None:
            oprot.writeFieldBegin('jvmPoolMetaspaceUsed', TType.DOUBLE, 8)
            oprot.writeDouble(self.jvmPoolMetaspaceUsed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TJvmGc(object):
    """
    Attributes:
     - type
     - jvmMemoryHeapUsed
     - jvmMemoryHeapMax
     - jvmMemoryNonHeapUsed
     - jvmMemoryNonHeapMax
     - jvmGcOldCount
     - jvmGcOldTime
     - jvmGcDetailed
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'type', None, 0, ),  # 1
        (2, TType.I64, 'jvmMemoryHeapUsed', None, None, ),  # 2
        (3, TType.I64, 'jvmMemoryHeapMax', None, None, ),  # 3
        (4, TType.I64, 'jvmMemoryNonHeapUsed', None, None, ),  # 4
        (5, TType.I64, 'jvmMemoryNonHeapMax', None, None, ),  # 5
        (6, TType.I64, 'jvmGcOldCount', None, None, ),  # 6
        (7, TType.I64, 'jvmGcOldTime', None, None, ),  # 7
        (8, TType.STRUCT, 'jvmGcDetailed', (TJvmGcDetailed, TJvmGcDetailed.thrift_spec), None, ),  # 8
    )

    def __init__(self, type=thrift_spec[1][4], jvmMemoryHeapUsed=None, jvmMemoryHeapMax=None, jvmMemoryNonHeapUsed=None, jvmMemoryNonHeapMax=None, jvmGcOldCount=None, jvmGcOldTime=None, jvmGcDetailed=None,):
        self.type = type
        self.jvmMemoryHeapUsed = jvmMemoryHeapUsed
        self.jvmMemoryHeapMax = jvmMemoryHeapMax
        self.jvmMemoryNonHeapUsed = jvmMemoryNonHeapUsed
        self.jvmMemoryNonHeapMax = jvmMemoryNonHeapMax
        self.jvmGcOldCount = jvmGcOldCount
        self.jvmGcOldTime = jvmGcOldTime
        self.jvmGcDetailed = jvmGcDetailed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.jvmMemoryHeapUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.jvmMemoryHeapMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.jvmMemoryNonHeapUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.jvmMemoryNonHeapMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.jvmGcOldCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.jvmGcOldTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.jvmGcDetailed = TJvmGcDetailed()
                    self.jvmGcDetailed.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TJvmGc')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.jvmMemoryHeapUsed is not None:
            oprot.writeFieldBegin('jvmMemoryHeapUsed', TType.I64, 2)
            oprot.writeI64(self.jvmMemoryHeapUsed)
            oprot.writeFieldEnd()
        if self.jvmMemoryHeapMax is not None:
            oprot.writeFieldBegin('jvmMemoryHeapMax', TType.I64, 3)
            oprot.writeI64(self.jvmMemoryHeapMax)
            oprot.writeFieldEnd()
        if self.jvmMemoryNonHeapUsed is not None:
            oprot.writeFieldBegin('jvmMemoryNonHeapUsed', TType.I64, 4)
            oprot.writeI64(self.jvmMemoryNonHeapUsed)
            oprot.writeFieldEnd()
        if self.jvmMemoryNonHeapMax is not None:
            oprot.writeFieldBegin('jvmMemoryNonHeapMax', TType.I64, 5)
            oprot.writeI64(self.jvmMemoryNonHeapMax)
            oprot.writeFieldEnd()
        if self.jvmGcOldCount is not None:
            oprot.writeFieldBegin('jvmGcOldCount', TType.I64, 6)
            oprot.writeI64(self.jvmGcOldCount)
            oprot.writeFieldEnd()
        if self.jvmGcOldTime is not None:
            oprot.writeFieldBegin('jvmGcOldTime', TType.I64, 7)
            oprot.writeI64(self.jvmGcOldTime)
            oprot.writeFieldEnd()
        if self.jvmGcDetailed is not None:
            oprot.writeFieldBegin('jvmGcDetailed', TType.STRUCT, 8)
            self.jvmGcDetailed.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)



class TCpuLoad(object):
    """
    Attributes:
     - jvmCpuLoad
     - systemCpuLoad
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'jvmCpuLoad', None, None, ),  # 1
        (2, TType.DOUBLE, 'systemCpuLoad', None, None, ),  # 2
    )

    def __init__(self, jvmCpuLoad=None, systemCpuLoad=None,):
        self.jvmCpuLoad = jvmCpuLoad
        self.systemCpuLoad = systemCpuLoad

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.jvmCpuLoad = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.systemCpuLoad = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TCpuLoad')
        if self.jvmCpuLoad is not None:
            oprot.writeFieldBegin('jvmCpuLoad', TType.DOUBLE, 1)
            oprot.writeDouble(self.jvmCpuLoad)
            oprot.writeFieldEnd()
        if self.systemCpuLoad is not None:
            oprot.writeFieldBegin('systemCpuLoad', TType.DOUBLE, 2)
            oprot.writeDouble(self.systemCpuLoad)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTransaction(object):
    """
    Attributes:
     - sampledNewCount
     - sampledContinuationCount
     - unsampledNewCount
     - unsampledContinuationCount
    """

    thrift_spec = (
        None,  # 0
        None,  # 1
        (2, TType.I64, 'sampledNewCount', None, None, ),  # 2
        (3, TType.I64, 'sampledContinuationCount', None, None, ),  # 3
        (4, TType.I64, 'unsampledNewCount', None, None, ),  # 4
        (5, TType.I64, 'unsampledContinuationCount', None, None, ),  # 5
    )

    def __init__(self, sampledNewCount=None, sampledContinuationCount=None, unsampledNewCount=None, unsampledContinuationCount=None,):
        self.sampledNewCount = sampledNewCount
        self.sampledContinuationCount = sampledContinuationCount
        self.unsampledNewCount = unsampledNewCount
        self.unsampledContinuationCount = unsampledContinuationCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I64:
                    self.sampledNewCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sampledContinuationCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.unsampledNewCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.unsampledContinuationCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TTransaction')
        if self.sampledNewCount is not None:
            oprot.writeFieldBegin('sampledNewCount', TType.I64, 2)
            oprot.writeI64(self.sampledNewCount)
            oprot.writeFieldEnd()
        if self.sampledContinuationCount is not None:
            oprot.writeFieldBegin('sampledContinuationCount', TType.I64, 3)
            oprot.writeI64(self.sampledContinuationCount)
            oprot.writeFieldEnd()
        if self.unsampledNewCount is not None:
            oprot.writeFieldBegin('unsampledNewCount', TType.I64, 4)
            oprot.writeI64(self.unsampledNewCount)
            oprot.writeFieldEnd()
        if self.unsampledContinuationCount is not None:
            oprot.writeFieldBegin('unsampledContinuationCount', TType.I64, 5)
            oprot.writeI64(self.unsampledContinuationCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TActiveTraceHistogram(object):
    """
    Attributes:
     - version
     - histogramSchemaType
     - activeTraceCount
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I16, 'version', None, 0, ),  # 1
        (2, TType.I32, 'histogramSchemaType', None, None, ),  # 2
        (3, TType.LIST, 'activeTraceCount', (TType.I32, None, False), None, ),  # 3
    )

    def __init__(self, version=thrift_spec[1][4], histogramSchemaType=None, activeTraceCount=None,):
        self.version = version
        self.histogramSchemaType = histogramSchemaType
        self.activeTraceCount = activeTraceCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.version = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.histogramSchemaType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.activeTraceCount = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readI32()
                        self.activeTraceCount.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TActiveTraceHistogram')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I16, 1)
            oprot.writeI16(self.version)
            oprot.writeFieldEnd()
        if self.histogramSchemaType is not None:
            oprot.writeFieldBegin('histogramSchemaType', TType.I32, 2)
            oprot.writeI32(self.histogramSchemaType)
            oprot.writeFieldEnd()
        if self.activeTraceCount is not None:
            oprot.writeFieldBegin('activeTraceCount', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.activeTraceCount))
            for iter27 in self.activeTraceCount:
                oprot.writeI32(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TActiveTrace(object):
    """
    Attributes:
     - histogram
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'histogram', (TActiveTraceHistogram, TActiveTraceHistogram.thrift_spec), None, ),  # 1
    )

    def __init__(self, histogram=None,):
        self.histogram = histogram

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.histogram = TActiveTraceHistogram()
                    self.histogram.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TActiveTrace')
        if self.histogram is not None:
            oprot.writeFieldBegin('histogram', TType.STRUCT, 1)
            self.histogram.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentStat(object):
    """
    Attributes:
     - agentId
     - startTimestamp
     - timestamp
     - collectInterval
     - gc
     - cpuLoad
     - transaction
     - activeTrace
     - metadata
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
        (2, TType.I64, 'startTimestamp', None, None, ),  # 2
        (3, TType.I64, 'timestamp', None, None, ),  # 3
        (4, TType.I64, 'collectInterval', None, None, ),  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        (10, TType.STRUCT, 'gc', (TJvmGc, TJvmGc.thrift_spec), None, ),  # 10
        None,  # 11
        None,  # 12
        None,  # 13
        None,  # 14
        None,  # 15
        None,  # 16
        None,  # 17
        None,  # 18
        None,  # 19
        (20, TType.STRUCT, 'cpuLoad', (TCpuLoad, TCpuLoad.thrift_spec), None, ),  # 20
        None,  # 21
        None,  # 22
        None,  # 23
        None,  # 24
        None,  # 25
        None,  # 26
        None,  # 27
        None,  # 28
        None,  # 29
        (30, TType.STRUCT, 'transaction', (TTransaction, TTransaction.thrift_spec), None, ),  # 30
        None,  # 31
        None,  # 32
        None,  # 33
        None,  # 34
        None,  # 35
        None,  # 36
        None,  # 37
        None,  # 38
        None,  # 39
        (40, TType.STRUCT, 'activeTrace', (TActiveTrace, TActiveTrace.thrift_spec), None, ),  # 40
        None,  # 41
        None,  # 42
        None,  # 43
        None,  # 44
        None,  # 45
        None,  # 46
        None,  # 47
        None,  # 48
        None,  # 49
        None,  # 50
        None,  # 51
        None,  # 52
        None,  # 53
        None,  # 54
        None,  # 55
        None,  # 56
        None,  # 57
        None,  # 58
        None,  # 59
        None,  # 60
        None,  # 61
        None,  # 62
        None,  # 63
        None,  # 64
        None,  # 65
        None,  # 66
        None,  # 67
        None,  # 68
        None,  # 69
        None,  # 70
        None,  # 71
        None,  # 72
        None,  # 73
        None,  # 74
        None,  # 75
        None,  # 76
        None,  # 77
        None,  # 78
        None,  # 79
        None,  # 80
        None,  # 81
        None,  # 82
        None,  # 83
        None,  # 84
        None,  # 85
        None,  # 86
        None,  # 87
        None,  # 88
        None,  # 89
        None,  # 90
        None,  # 91
        None,  # 92
        None,  # 93
        None,  # 94
        None,  # 95
        None,  # 96
        None,  # 97
        None,  # 98
        None,  # 99
        None,  # 100
        None,  # 101
        None,  # 102
        None,  # 103
        None,  # 104
        None,  # 105
        None,  # 106
        None,  # 107
        None,  # 108
        None,  # 109
        None,  # 110
        None,  # 111
        None,  # 112
        None,  # 113
        None,  # 114
        None,  # 115
        None,  # 116
        None,  # 117
        None,  # 118
        None,  # 119
        None,  # 120
        None,  # 121
        None,  # 122
        None,  # 123
        None,  # 124
        None,  # 125
        None,  # 126
        None,  # 127
        None,  # 128
        None,  # 129
        None,  # 130
        None,  # 131
        None,  # 132
        None,  # 133
        None,  # 134
        None,  # 135
        None,  # 136
        None,  # 137
        None,  # 138
        None,  # 139
        None,  # 140
        None,  # 141
        None,  # 142
        None,  # 143
        None,  # 144
        None,  # 145
        None,  # 146
        None,  # 147
        None,  # 148
        None,  # 149
        None,  # 150
        None,  # 151
        None,  # 152
        None,  # 153
        None,  # 154
        None,  # 155
        None,  # 156
        None,  # 157
        None,  # 158
        None,  # 159
        None,  # 160
        None,  # 161
        None,  # 162
        None,  # 163
        None,  # 164
        None,  # 165
        None,  # 166
        None,  # 167
        None,  # 168
        None,  # 169
        None,  # 170
        None,  # 171
        None,  # 172
        None,  # 173
        None,  # 174
        None,  # 175
        None,  # 176
        None,  # 177
        None,  # 178
        None,  # 179
        None,  # 180
        None,  # 181
        None,  # 182
        None,  # 183
        None,  # 184
        None,  # 185
        None,  # 186
        None,  # 187
        None,  # 188
        None,  # 189
        None,  # 190
        None,  # 191
        None,  # 192
        None,  # 193
        None,  # 194
        None,  # 195
        None,  # 196
        None,  # 197
        None,  # 198
        None,  # 199
        (200, TType.STRING, 'metadata', 'UTF8', None, ),  # 200
    )

    def __init__(self, agentId=None, startTimestamp=None, timestamp=None, collectInterval=None, gc=None, cpuLoad=None, transaction=None, activeTrace=None, metadata=None,):
        self.agentId = agentId
        self.startTimestamp = startTimestamp
        self.timestamp = timestamp
        self.collectInterval = collectInterval
        self.gc = gc
        self.cpuLoad = cpuLoad
        self.transaction = transaction
        self.activeTrace = activeTrace
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.startTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.collectInterval = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.gc = TJvmGc()
                    self.gc.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.cpuLoad = TCpuLoad()
                    self.cpuLoad.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.transaction = TTransaction()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRUCT:
                    self.activeTrace = TActiveTrace()
                    self.activeTrace.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 200:
                if ftype == TType.STRING:
                    self.metadata = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TAgentStat')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.startTimestamp is not None:
            oprot.writeFieldBegin('startTimestamp', TType.I64, 2)
            oprot.writeI64(self.startTimestamp)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.collectInterval is not None:
            oprot.writeFieldBegin('collectInterval', TType.I64, 4)
            oprot.writeI64(self.collectInterval)
            oprot.writeFieldEnd()
        if self.gc is not None:
            oprot.writeFieldBegin('gc', TType.STRUCT, 10)
            self.gc.write(oprot)
            oprot.writeFieldEnd()
        if self.cpuLoad is not None:
            oprot.writeFieldBegin('cpuLoad', TType.STRUCT, 20)
            self.cpuLoad.write(oprot)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 30)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        if self.activeTrace is not None:
            oprot.writeFieldBegin('activeTrace', TType.STRUCT, 40)
            self.activeTrace.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 200)
            oprot.writeString(self.metadata.encode('utf-8') if sys.version_info[0] == 2 else self.metadata)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentStatBatch(object):
    """
    Attributes:
     - agentId
     - startTimestamp
     - agentStats
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
        (2, TType.I64, 'startTimestamp', None, None, ),  # 2
        None,  # 3
        None,  # 4
        None,  # 5
        None,  # 6
        None,  # 7
        None,  # 8
        None,  # 9
        (10, TType.LIST, 'agentStats', (TType.STRUCT, (TAgentStat, TAgentStat.thrift_spec), False), None, ),  # 10
    )

    def __init__(self, agentId=None, startTimestamp=None, agentStats=None,):
        self.agentId = agentId
        self.startTimestamp = startTimestamp
        self.agentStats = agentStats

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.startTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.agentStats = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = TAgentStat()
                        _elem33.read(iprot)
                        self.agentStats.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TAgentStatBatch')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.startTimestamp is not None:
            oprot.writeFieldBegin('startTimestamp', TType.I64, 2)
            oprot.writeI64(self.startTimestamp)
            oprot.writeFieldEnd()
        if self.agentStats is not None:
            oprot.writeFieldBegin('agentStats', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.agentStats))
            for iter34 in self.agentStats:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
